@using Microsoft.AspNetCore.Components.Forms
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

<div class="d-flex justify-content-start">
    <div class="col-sm-3 col-md-3 col-lg-2 p-2">
        <h5 style="font-weight:bold">Origen</h5>
    </div>
    <div class="col-sm-3 col-md-3 col-lg-2 p-2">
        <h5 style="font-weight:bold">Destino</h5>
    </div>
    <div class="col-sm-3 col-md-3 col-lg-2 p-2">
        <h5 style="font-weight:bold">Sentido</h5>
    </div>
</div>
<div class="d-flex justify-content-start">
    <div class="col-sm-3 col-md-3 col-lg-2 p-2">
        @Origen
    </div>
    <div class="col-sm-3 col-md-3 col-lg-2 p-2">
        @Destino
    </div>
    <div class="col-sm-3 col-md-3 col-lg-2 p-2">
        @Sentido
    </div>
</div>

<br />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Horario Salida :</label>
        <div>
            <input type="time" min="00:00" max="23:59" pattern="[0-2][0-9]:[0-5][0-9]" class="form-control" @bind-value="@Intervalo.HorarioSalida" @onblur="@ValidarHorarioSalida" />
            <ValidationMessage For="@(() => Intervalo.HorarioSalida)" />
        </div>
        <label>Horario Llegada :</label>
        <div>
            <input type="time" min="00:00" max="23:59" pattern="[0-2][0-9]:[0-5][0-9]" class="form-control" @bind-value="@Intervalo.HorarioLlegada" @onkeydown="@ValidarHorarioLlegada" />
            <ValidationMessage For="@(() => Intervalo.HorarioLlegada)" />
        </div>
        <br/>
        <label>Días Horario :</label>
        <div>
            <InputCheckbox id="idLunes" @bind-Value="Intervalo.Lunes" class="form-check-input"></InputCheckbox>
            <label for="idLunes" class="form-check-label">Lunes</label>
            <InputCheckbox id="idMartes" @bind-Value="Intervalo.Martes" class="form-check-input"></InputCheckbox>
            <label for="idMartes" class="form-check-label">Martes</label>
            <InputCheckbox id="idMiercoles" @bind-Value="Intervalo.Miercoles" class="form-check-input"></InputCheckbox>
            <label for="idMiercoles" class="form-check-label">Miercoles</label>
            <InputCheckbox id="idJueves" @bind-Value="Intervalo.Jueves" class="form-check-input"></InputCheckbox>
            <label for="idJueves" class="form-check-label">Jueves</label>
            <InputCheckbox id="idViernes" @bind-Value="Intervalo.Viernes" class="form-check-input"></InputCheckbox>
            <label for="idViernes" class="form-check-label">Viernes</label>
            <InputCheckbox id="idSabado" @bind-Value="Intervalo.Sabado" class="form-check-input"></InputCheckbox>
            <label for="idSabado" class="form-check-label">Sabado</label>
            <InputCheckbox id="idDomingo" @bind-Value="Intervalo.Domingo" class="form-check-input"></InputCheckbox>
            <label for="idDomingo" class="form-check-label">Domingo</label>
        </div>
        <br/>
        <label>Número Días Recorrido :</label>
        <div>
            <select @bind="Intervalo.Dias">
                <option value=0>Mismo Día...</option>
                <option value=1>1 Día</option>
                <option value=2>2 Días</option>
                <option value=3>3 Días</option>
            </select>
        </div>
        <br/>
        <label>Bloqueo Punto-Día</label>
        <br />
        <br />
    </div>
    <button class="btn btn-success" type="submit">Guardar Cambios</button>
    <button class="btn btn-primary" type="button" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;

    [EditorRequired]
    [Parameter]
    public Intervalo Intervalo { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public int ItinerarioId { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    public Itinerario? itinerario { get; set; }

    public string? Origen;
    public string? Destino;
    public string? Sentido;

    private DateTime HoraDefault = DateTime.Parse("01-01-0001 00:00");

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        editContext = new(Intervalo);

        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        Sentido = "IDA";

        var responseHTTP = await repository.Get<Itinerario>($"api/itinerarios/{ItinerarioId}/0");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/itinerarios");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        itinerario = responseHTTP.Response!;

        if (Intervalo.Id > 0)
        {
            if (Intervalo.Sentido == 1)
            {
                var TrayOri = itinerario.Ruta!.Trayectos!.Where(t => t.Tipo == 1).FirstOrDefault();
                var PuntoOri = TrayOri!.Punto;
                Origen = PuntoOri!.Nombre;

                var TrayDes = itinerario.Ruta!.Trayectos!.Where(t => t.Tipo == 3).FirstOrDefault();
                var PuntoDes = TrayDes!.Punto;
                Destino = PuntoDes!.Nombre;

                Intervalo.TrayectoId = TrayOri.Id;
                Sentido = "IDA";
            }

            if (Intervalo.Sentido == 2)
            {
                var TrayOri = itinerario.Ruta!.Trayectos!.Where(t => t.Tipo == 3).FirstOrDefault();
                var PuntoOri = TrayOri!.Punto;
                Origen = PuntoOri!.Nombre;

                var TrayDes = itinerario.Ruta!.Trayectos!.Where(t => t.Tipo == 1).FirstOrDefault();
                var PuntoDes = TrayDes!.Punto;
                Destino = PuntoDes!.Nombre;

                Intervalo.TrayectoId = TrayOri.Id;
                Sentido = "REGRESO";
            }
        }
        else
        {
            var TrayOri = itinerario.Ruta!.Trayectos!.Where(t => t.Tipo == 1).FirstOrDefault();
            var PuntoOri = TrayOri!.Punto;
            Origen = PuntoOri!.Nombre;

            var TrayDes = itinerario.Ruta!.Trayectos!.Where(t => t.Tipo == 3).FirstOrDefault();
            var PuntoDes = TrayDes!.Punto;
            Destino = PuntoDes!.Nombre;

            Intervalo.TrayectoId = TrayOri.Id;
            Sentido = "IDA";

            Intervalo.Lunes = true;
            Intervalo.Martes = true;
            Intervalo.Miercoles = true;
            Intervalo.Jueves = true;
            Intervalo.Viernes = true;
            Intervalo.Sabado = true;
            Intervalo.Domingo = true;
        }
        Intervalo.ItinerarioId = ItinerarioId;
    }

    private async Task ValidarHorarioLlegada(KeyboardEventArgs e)
    {
        if (Intervalo.HorarioSalida == HoraDefault)
        {
            await sweetAlertService.FireAsync("Validación", "El Horario de salida no ha sido modificado", SweetAlertIcon.Error);
            Intervalo.HorarioLlegada = HoraDefault;
        }
    }

    private async Task ValidarHorarioSalida(FocusEventArgs e)
    {
        if (Intervalo.HorarioSalida == HoraDefault)
        {
            await sweetAlertService.FireAsync("Validación", "El Horario de salida no ha sido modificado", SweetAlertIcon.Error);
            return;
        }

        var Salida = Intervalo.HorarioSalida.ToString("HH:mm");

        int sumaMinutos = itinerario!.Ruta!.Trayectos!.Sum(m => m.Minutos);
        int sumaEstancia = itinerario!.Ruta!.Trayectos!.Where(d => d.Tipo != 3).Sum(s => s.Estancia);
        int EstanciaLlegada = itinerario!.Ruta!.Trayectos!.Where(d => d.Tipo == 3).Sum(s => s.Estancia);

        int TotalMinutos = sumaMinutos + sumaEstancia;

        int dias = 0;
        if (TotalMinutos > 0)
        {
            dias = TotalMinutos / 1440;
        }

        var HoraLlegada = Intervalo.HorarioSalida.AddMinutes(TotalMinutos);

        Intervalo.HorarioLlegada = HoraLlegada;
        Intervalo.Dias = dias;
    }
}