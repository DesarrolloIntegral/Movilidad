@using Microsoft.AspNetCore.Components.Forms
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Descripcion :</label>
        <div>
            <InputText class="form-control" @bind-Value="@Itinerario.Descripcion" @oninput="EventCallback.Factory.CreateBinder<string>(this, __value => Itinerario.Descripcion = __value?.ToUpper(), Itinerario.Descripcion?.ToUpper())" />
            <ValidationMessage For="@(() => Itinerario.Descripcion)" />
        </div>
        <label>Ruta :</label>
        <select @bind="Itinerario.RutaId">
            <option value=0>Seleccione Ruta...</option>
            @if (Rutas != null)
            {
                @foreach (var ruta in Rutas)
                {
                    <option value="@ruta.Id">@ruta.Nombre</option>
                }
            }
        </select>
    </div>
    <button class="btn btn-success" type="submit">Guardar Cambios</button>
    <button class="btn btn-primary" type="button" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    public List<Ruta>? Rutas { get; set; }

    private EditContext editContext = null!;

    [EditorRequired]
    [Parameter]
    public Itinerario Itinerario { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        editContext = new(Itinerario);
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        string url2 = $"api/rutas/full";

        var responseHppt2 = await repository.Get<List<Ruta>>(url2);
        Rutas = responseHppt2.Response!;
    }
}