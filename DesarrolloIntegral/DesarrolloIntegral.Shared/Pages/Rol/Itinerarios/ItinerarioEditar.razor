@page "/itinerarios/editar/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Editar itinerario</h3>

@if (itinerario is null)
{
    <p>Cargando...</p>
}
else
{
    <ItinerarioForm @ref="itinerarioForm" Itinerario="itinerario" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private Itinerario? itinerario;
    private ItinerarioForm? itinerarioForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Itinerario>($"api/itinerarios/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/itinerarios");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        itinerario = responseHTTP.Response;
    }

    private async Task EditAsync()
    {
        var responseHTTP = await repository.Put("api/itinerarios", itinerario);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        itinerarioForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/itinerarios");
    }
}
