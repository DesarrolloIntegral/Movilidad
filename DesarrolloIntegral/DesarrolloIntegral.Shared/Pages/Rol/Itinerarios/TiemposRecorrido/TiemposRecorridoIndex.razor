@page "/tiemposRecorrido/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (itinerario != null)
{
    <h3>@itinerario?.Descripcion</h3>
    <h5>@itinerario?.Ruta?.Nombre</h5>
    <h5>Tiempos de Recorrido</h5>
}

<div class="mb-3">
    <a class="btn btn-primary mb-3" href="/itinerarios">Regresar</a>
</div>

<GenericList MyList="lstTiempoRecorrido">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Punto</th>
                    <th>Minutos</th>
                    <th>Sentido</th>
                    <th>Status</th>
                    <th style="width:400px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var tiempo in lstTiempoRecorrido!)
                {
                    <tr>
                        <td>
                            @tiempo.Trayecto?.Punto?.Nombre
                        </td>
                        <td>
                            @tiempo.Minutos
                        </td>
                        <td>
                            @if (tiempo.Sentido == 1)
                            {
                                <p>Ida</p>
                            }
                            else if (tiempo.Sentido == 2)
                            {
                                <p>Regreso</p>
                            }
                        </td>
                        <td>
                            @if (tiempo.Estado == 1)
                            {
                                <p>Activo</p>
                            }
                            else
                            {
                                <p>Baja</p>
                            }
                        </td>
                        <td>
                            @if (tiempo.Estado == 1)
                            {
                                <button class="btn btn-secondary" @onclick=@(() => DesactivarAsync(tiempo))>Desactivar</button>
                            }
                            else
                            {
                                <button class="btn btn-success" @onclick=@(() => ActivarAsync(tiempo))>Activar</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    [CascadingParameter]
    public string? rutaCnx { get; set; }

    [Parameter]
    public int Id { get; set; } //este id corresponde al itinerario

    private Itinerario? itinerario;

    public List<TiempoRecorrido>? lstTiempoRecorrido { get; set; }

    public List<Trayecto>? lstTrayecto { get; set; }

    private int currentPage = 1;
    private int totalPages;

    protected async override Task OnInitializedAsync()
    {
        await GeneraTiempos();
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        var responseHTTP = await repository.Get<List<TiempoRecorrido>>($"api/tiemposRecorrido/{Id}/0");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/tiemposRecorrido");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        lstTiempoRecorrido = responseHTTP.Response;

        if (lstTiempoRecorrido!.Count == 0)
        {
            if (itinerario != null)
            {
                await GeneraTiempos();
            }
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task DesactivarAsync(TiempoRecorrido tiempo)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres Desactivar este registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        tiempo.Estado = 0;
        var responseHTTP = await repository.Put($"api/tiemposRecorrido/", tiempo);

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task ActivarAsync(TiempoRecorrido tiempo)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres activar este registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        tiempo.Estado = 1;
        var responseHTTP = await repository.Put($"api/tiemposRecorrido/", tiempo);

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task GeneraTiempos()
    {
        var response = await repository.Delete($"api/tiemposRecorrido/{Id}");
        if (response.Error)
        {
            if (response.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/itinerarios");
                return;
            }

            var messageError = await response.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        var responseHTTP3 = await repository.Get<Itinerario>($"api/itinerarios/{Id}");

        if (responseHTTP3.Error)
        {
            if (responseHTTP3.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/tiemposRecorrido");
                return;
            }

            var messageError = await responseHTTP3.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        itinerario = responseHTTP3.Response;

        var responseHTTP = await repository.Get<List<Trayecto>>($"api/trayectos/{itinerario?.RutaId}/0/0");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/itinerarios");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        lstTrayecto = responseHTTP.Response;

        if (lstTrayecto?.Count > 0)
        {
            var lstIda = lstTrayecto.OrderBy(t => t.Posicion);
            if (lstIda != null)
            {
                int estancia = 0;
                foreach(var ida in lstIda)
                {
                    TiempoRecorrido tiempoRecorrido = new TiempoRecorrido
                    {
                        Id=0,
                        Minutos = ida.Minutos + estancia,
                        Sentido = 1,
                        Estado = 1,
                        ItinerarioId = itinerario!.Id,
                        TrayectoId = ida.Id
                    };
                    var responseHttp = await repository.Post("/api/tiemposRecorrido", tiempoRecorrido);
                    if (responseHttp.Error)
                    {
                        var message = await responseHttp.GetErrorMessageAsync();
                        await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                        return;
                    }
                    estancia = ida.Estancia;
                }
            }

            var lstRegreso = lstTrayecto.OrderByDescending(t => t.Posicion);
            if (lstRegreso != null)
            {
                foreach (var regreso in lstRegreso)
                {
                    int min = 0;
                    int pos = regreso.Posicion;
                    if (regreso.Tipo < 3)
                    {
                        var posAnt = lstRegreso.Where(p => p.Posicion == pos + 1).FirstOrDefault();
                        if (posAnt?.Tipo < 3)
                            min = posAnt!.Minutos + posAnt.Estancia;
                        else
                            min = posAnt!.Minutos;
                    }

                    TiempoRecorrido tiempoRecorrido = new TiempoRecorrido
                        {
                            Id = 0,
                            Minutos = min,
                            Sentido = 2,
                            Estado = 1,
                            ItinerarioId = itinerario!.Id,
                            TrayectoId = regreso.Id
                        };
                    var responseHttp = await repository.Post("/api/tiemposRecorrido", tiempoRecorrido);
                    if (responseHttp.Error)
                    {
                        var message = await responseHttp.GetErrorMessageAsync();
                        await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                        return;
                    }
                }
            }
        }

        await LoadAsync();
    }
}
