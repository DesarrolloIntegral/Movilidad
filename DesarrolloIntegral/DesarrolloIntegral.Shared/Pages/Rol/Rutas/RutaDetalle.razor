@page "/rutas/detalles/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (ruta is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@ruta.Nombre</h3>
    <h4>Detalle Puntos Trayecto</h4>
    <div class="mb-2">
        <a class="btn btn-primary" href="/trayectos/crear/@ruta.Id">Nuevo Punto</a>
        <a class="btn btn-success" href="/rutas">Regresar</a>
    </div>
}

@if (_isVisible)
{
    <Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />
}

<GenericList MyList="trayectos">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Punto</th>
                    <th class="text-center">Tipo</th>
                    <th class="text-center">Posicion</th>
                    <th class="text-center">Terminal/Venta</th>
                    <th class="text-center">Kilometros</th>
                    <th class="text-center">Minutos</th>
                    <th class="text-center">Estancia</th>
                    <th class="text-center">Status</th>
                    <th style="width:400px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trayecto in trayectos!)
                {
                    <tr>
                        <td>
                            @trayecto.Punto?.Nombre
                        </td>
                        <td class="text-center">
                            @if (@trayecto.Tipo == 1)
                            {
                                <p>Salida</p>
                            }
                            else if (@trayecto.Tipo == 2)
                            {
                                <p>Paso</p>
                            }
                            else if (@trayecto.Tipo == 3)
                            {
                                <p>Llegada</p>
                            }
                        </td>
                        <td class="text-center">
                            @trayecto.Posicion
                        </td>
                        <td class="text-center">
                            @if (@trayecto.Terminal == 1)
                            {
                                <p>Si</p>
                            }
                            else if (@trayecto.Terminal == 2)
                            {
                                <p>No</p>
                            }
                        </td>
                        <td class="text-center">
                            @trayecto.Kilometros
                        </td>
                        <td class="text-center">
                            @trayecto.Minutos
                        </td>
                        <td class="text-center">
                            @trayecto.Estancia
                        </td>
                        <td class="text-center">
                            @if (@trayecto.Estado == 1)
                            {
                                <p>Activo</p>
                            }
                            else
                            {
                                <p>Baja</p>
                            }
                        </td>
                        <td>
                            <a class="btn btn-warning" href="/trayectos/editar/@trayecto.Id">Editar</a>
                            @if (trayecto.Estado == 1)
                            {
                                <button class="btn btn-secondary ms-1" @onclick=@(() => DesactivarAsync(trayecto))>Desactivar</button>
                            }
                            else
                            {
                                <button class="btn btn-success ms-1" @onclick=@(() => ActivarAsync(trayecto))>Activar</button>
                            }
                            <button class="btn btn-primary ms-1" @onclick=@(() => Subir(trayecto))>Subir</button>
                            <button class="btn btn-danger ms-1" @onclick=@(() => Bajar(trayecto))>Bajar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    private Ruta? ruta;
    private List<Trayecto>? trayectos;
    private List<Trayecto>? trayectosTodos;

    private int currentPage = 1;
    private int totalPages;

    private bool _isVisible = true;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
        await LoadAsyncAll();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
        await LoadAsyncAll();
    }

    private async Task LoadAsync(int page = 1)
    {
        string url1 = $"api/trayectos?id={Id}&page={page}";
        string url2 = $"api/trayectos/totalPages?id={Id}";
        var responseHppt = await repository.Get<Ruta>($"api/rutas/{Id}");
        var responseHppt2 = await repository.Get<List<Trayecto>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        ruta = responseHppt.Response;
        trayectos = responseHppt2.Response;
        totalPages = responseHppt3.Response;
    }

    private async Task LoadAsyncAll()
    {
        string url = $"api/trayectos/{Id}/0/0";

        var responseHppt = await repository.Get<List<Trayecto>>(url);
        trayectosTodos = responseHppt.Response!;
    }

    private async Task DesactivarAsync(Trayecto trayecto)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres Desactivar el Empleado?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        trayecto.Estado = 0;
        trayecto.Ruta = null;
        var responseHTTP = await repository.Put($"api/trayectos/", trayecto);

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task ActivarAsync(Trayecto trayecto)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres activar el Empleado?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        trayecto.Estado = 1;
        trayecto.Ruta = null;
        var responseHTTP = await repository.Put($"api/trayectos/", trayecto);

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task Bajar(Trayecto trayecto)
    {
        int posActual = trayecto.Posicion;
        int posSiguiente = posActual + 1;

        var ultimo = trayectosTodos?.OrderByDescending(x => x.Posicion).Take(1).FirstOrDefault();
        int posUltimo = ultimo!.Posicion;

        if (posActual == posUltimo)
        {
            return;
        }

        if (posUltimo > posActual)
        {
            Trayecto? trSiguiente = trayectosTodos?.Where(p => p.Posicion == posSiguiente).FirstOrDefault();
            trSiguiente!.Posicion = posActual;

            //Actualiza el registro actual
            trayecto.Posicion = posSiguiente;
            trayecto.Ruta = null;
            var responseHTTP = await repository.Put($"api/trayectos/", trayecto);

            if (responseHTTP.Error)
            {
                if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
                {
                    var mensajeError = await responseHTTP.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                    return;
                }
            }

            trSiguiente.Ruta = null;
            var responseHTTP2 = await repository.Put($"api/trayectos/", trSiguiente);

            if (responseHTTP2.Error)
            {
                if (responseHTTP2.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
                {
                    var mensajeError = await responseHTTP2.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                    return;
                }
            }
        }

        await LoadAsync(currentPage);
        await LoadAsyncAll();
    }

    private async Task Subir(Trayecto trayecto)
    {
        int posActual = trayecto.Posicion;
        int posAnterior = posActual - 1;

        if (posActual == 1)
        {
            return;
        }

        if (posActual > 1)
        {
            Trayecto? trAnterior = trayectosTodos?.Where(p => p.Posicion == posAnterior).FirstOrDefault();
            trAnterior!.Posicion = posActual;

            //Actualiza el registro actual
            trayecto.Posicion = posAnterior;
            trayecto.Ruta = null;
            var responseHTTP = await repository.Put($"api/trayectos/", trayecto);

            if (responseHTTP.Error)
            {
                if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
                {
                    var mensajeError = await responseHTTP.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                    return;
                }
            }

            trAnterior.Ruta = null;
            var responseHTTP2 = await repository.Put($"api/trayectos/", trAnterior);

            if (responseHTTP2.Error)
            {
                if (responseHTTP2.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
                {
                    var mensajeError = await responseHTTP2.GetErrorMessageAsync();
                    await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                    return;
                }
            }
        }

        await LoadAsync(currentPage);
        await LoadAsyncAll();
    }
}
