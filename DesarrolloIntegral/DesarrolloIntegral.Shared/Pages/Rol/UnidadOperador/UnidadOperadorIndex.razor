@page "/unidadOperador"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Asignación Unidad-Operador</h3>

<div class="mb-3">
    <a class="btn btn-primary mb-3" href="/unidadOperador/crear">Nueva Asignación Unidad-Operador</a>
</div>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />

<GenericList MyList="UnidadOperadores">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Unidad</th>
                    <th>Servicio</th>
                    <th>Clave Operador</th>
                    <th>Nombre Operador</th>
                    <th>Status</th>
                    <th style="width:400px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var asigna in UnidadOperadores!)
                {
                    <tr>
                        <td>
                            @asigna.Unidad?.NumeroEconomico
                        </td>
                        <td>
                            @asigna.Linea?.Nombre
                        </td>
                        <td>
                            @asigna.Personal?.Clave
                        </td>
                        <td>
                            @asigna.Personal?.Nombre
                        </td>
                        <td>
                            @if (asigna.Estado == 1)
                            {
                                <p>Activo</p>
                            }
                            else
                            {
                                <p>Baja</p>
                            }
                        </td>
                        <td>
                            <a class="btn btn-warning" href="/unidadOperador/editar/@asigna.Id">Editar</a>
                            @if (asigna.Estado == 1)
                            {
                                <button class="btn btn-secondary" @onclick=@(() => DesactivarAsync(asigna))>Desactivar</button>
                            }
                            else
                            {
                                <button class="btn btn-success" @onclick=@(() => ActivarAsync(asigna))>Activar</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    [CascadingParameter]
    public string? rutaCnx { get; set; }

    public List<UnidadOperador>? UnidadOperadores { get; set; }

    private int currentPage = 1;
    private int totalPages;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        string url1 = $"api/unidadOperadores?page={page}";
        string url2 = $"api/unidadOperadores/totalPages";

        var responseHppt = await repository.Get<List<UnidadOperador>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        UnidadOperadores = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task DesactivarAsync(UnidadOperador unidadoperador)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres Desactivar esta asignación?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        unidadoperador.Estado = 0;
        var responseHTTP = await repository.Put($"api/unidadOperadores/", unidadoperador);

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task ActivarAsync(UnidadOperador unidadoperador)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres activar esta asignación?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        unidadoperador.Estado = 1;
        var responseHTTP = await repository.Put($"api/unidadOperadores/", unidadoperador);

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}
