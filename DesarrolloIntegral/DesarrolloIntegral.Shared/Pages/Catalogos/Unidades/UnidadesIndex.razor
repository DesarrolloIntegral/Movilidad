@page "/unidades"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Unidades</h3>

<div class="mb-3">
    <a class="btn btn-primary mb-3" href="/unidades/crear">Nueva Unidad</a>
</div>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPageAsync" />

<GenericList MyList="Unidades">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>IdUnidad</th>
                    <th>NumeroEconomico</th>
                    <th>Serie</th>
                    <th>Año</th>
                    <th>Placas</th>
                    <th>Asientos</th>
                    <th>Estado</th>
                    <th style="width:400px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var unidad in Unidades!)
                {
                    <tr>
                        <td>
                            @unidad.IdUnidad
                        </td>
                        <td>
                            @unidad.NumeroEconomico
                        </td>
                        <td>
                            @unidad.Serie
                        </td>
                        <td>
                            @unidad.ModeloAnio
                        </td>
                        <td>
                            @unidad.Placas
                        </td>
                        <td>
                            @unidad.Asientos
                        </td>
                        <td>
                            @if (unidad.Estado == 1)
                            {
                                <p>Activo</p>
                            }
                            else
                            {
                                <p>Baja</p>
                            }
                        </td>
                        <td>
                            <a class="btn btn-info" href="/unidades/detalles/@unidad.Id/1">Detalles</a>
                            <a class="btn btn-warning" href="/unidades/editar/@unidad.Id">Editar</a>
                            @if (unidad.Estado == 1)
                            {
                                <button class="btn btn-secondary" @onclick=@(() => DesactivarAsync(unidad))>Desactivar</button>
                            }
                            else
                            {
                                <button class="btn btn-success" @onclick=@(() => ActivarAsync(unidad))>Activar</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    [CascadingParameter]
    public string? rutaCnx { get; set; }

    public List<Unidad>? Unidades { get; set; }

    private int currentPage = 1;
    private int totalPages;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        string url1 = $"api/unidades?page={page}";
        string url2 = $"api/unidades/totalPages";

        var responseHppt = await repository.Get<List<Unidad>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Unidades = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task DesactivarAsync(Unidad unidad)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres Desactivar la Unidad?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        unidad.Estado = 0;
        var responseHTTP = await repository.Put($"api/unidades/", unidad);

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task ActivarAsync(Unidad unidad)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres activar la Unidad?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        unidad.Estado = 1;
        var responseHTTP = await repository.Put($"api/unidades/", unidad);

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}
