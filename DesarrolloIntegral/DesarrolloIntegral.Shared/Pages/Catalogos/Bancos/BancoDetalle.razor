@page "/bancos/detalles/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if(banco is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@banco.NombreBanco</h3>
    <div class="mb-2">
        <a class="btn btn-primary" href="/cuentas/crear/@banco.Id">Nueva Cuenta</a>
        <a class="btn btn-success" href="/bancos">Regresar</a>
    </div>

}

<GenericList MyList="cuentas">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Número</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cuenta in cuentas!)
                {
                    <tr>
                        <td>
                            @cuenta.NumeroCuenta
                        </td>
                        <td>
                            <a class="btn btn-warning" href="/cuentas/editar/@cuenta.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(cuenta.Id))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>
    

@code {
    private Banco? banco;
    private List<CuentaBancaria>? cuentas;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<Banco>($"/api/bancos/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/bancos");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        banco = responseHttp.Response;
        cuentas = banco!.Cuentas!.ToList();
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/cuentas/{id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}
