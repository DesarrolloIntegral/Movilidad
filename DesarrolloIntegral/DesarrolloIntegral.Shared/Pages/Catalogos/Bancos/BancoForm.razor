@using Microsoft.AspNetCore.Components.Forms
@inject SweetAlertService sweetAlertService

@*<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"/>*@

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Bancos:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Banco.NombreBanco" />
            <ValidationMessage For="@(() => Banco.NombreBanco)" />

            <select value="@Banco.EstadoBanco" @onchange="ChangeState">
                <option value="@Banco.EstadoBanco">1</option>
                <option value="@Banco.EstadoBanco">2</option>
            </select>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {

    private EditContext editContext = null!;

    [EditorRequired]
    [Parameter]
    public Banco Banco { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    void ChangeState(ChangeEventArgs e)
    {
        Banco.EstadoBanco = Convert.ToInt32(e.Value!.ToString());
    }

    protected override void OnInitialized()
    {
        editContext = new(Banco);
    }

    public bool FormPostedSuccessfully { get; set; } = false;

    /*
    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
        {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
            {
        return;
        }

        if (FormPostedSuccessfully)
            {
        return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
                {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
        });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
            {
        return;
        }

        context.PreventNavigation();
    }
    */
}
