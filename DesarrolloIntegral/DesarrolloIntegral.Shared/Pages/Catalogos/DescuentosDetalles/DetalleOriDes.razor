@page "/detalles/orides/{Id:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (descuento is null)
{
    <p>Cargando...</p>
}
else
{
    <h3>@descuento.Nombre</h3>
    <h2>@detalle?.Linea?.Nombre</h2>
    <div class="mb-2">
        <a class="btn btn-primary" href="/origendestino/crear/@detalle?.Id">Nuevo Detalle</a>
        <a class="btn btn-success" href="/descuentos/detalles/@descuento.Id">Regresar</a>
    </div>
}

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />

<GenericList MyList="OrigenDestino">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Origen</th>
                    <th>Destino</th>
                    <th>FechaInicio</th>
                    <th>FechaFin</th>
                    <th>Status</th>
                    <th style="width:400px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var orides in OrigenDestino!)
                {
                    <tr>
                        <td>
                            @orides.PuntoOrigen?.Nombre
                        </td>
                        <td>
                            @orides.PuntoDestino?.Nombre
                        </td>
                        <td>
                            @orides.FechaInicio.ToString("dd-MM-yyyy")
                        </td>
                        <td>
                            @orides.FechaFin.ToString("dd-MM-yyyy")
                        </td>
                        <td>
                            @if (orides.Estado == 1)
                            {
                                <p>Activo</p>
                            }
                            else
                            {
                                <p>Baja</p>
                            }
                        </td>
                        <td>
                            <a class="btn btn-warning" href="/origendestino/editar/@orides.Id">Editar</a>
                            @if (orides.Estado == 1)
                            {
                                <button class="btn btn-secondary" @onclick=@(() => DesactivarAsync(orides))>Desactivar</button>
                            }
                            else
                            {
                                <button class="btn btn-success" @onclick=@(() => ActivarAsync(orides))>Activar</button>
                            }

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>


@code {
    private Descuento? descuento;
    private DescuentoDetalle? detalle;
    private List<DescuentoOrigenDestino>? OrigenDestino;

    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        string url1 = $"api/origendestino?id={Id}&page={page}";
        string url2 = $"api/origendestino/totalPages?id={Id}";
        var responseHppt = await repository.Get<DescuentoDetalle>($"api/descuentosdetalles/{Id}");
        var responseHppt2 = await repository.Get<List<DescuentoOrigenDestino>>(url1);
        var responseHppt3 = await repository.Get<int>(url2);
        var responseHppt4 = await repository.Get<Descuento>($"api/descuentos/{Id}");
        detalle = responseHppt.Response;
        OrigenDestino = responseHppt2.Response;
        totalPages = responseHppt3.Response;
        descuento = responseHppt4.Response;
    }

    private async Task DesactivarAsync(DescuentoOrigenDestino detalle)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres Desactivar el Empleado?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        detalle.Estado = 0;
        var responseHTTP = await repository.Put($"api/origendestino/", detalle);

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }

    private async Task ActivarAsync(DescuentoOrigenDestino detalle)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres activar el Empleado?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        detalle.Estado = 1;
        var responseHTTP = await repository.Put($"api/origendestino/", detalle);

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}
