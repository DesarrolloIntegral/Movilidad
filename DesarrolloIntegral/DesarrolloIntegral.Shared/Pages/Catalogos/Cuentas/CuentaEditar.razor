@page "/cuentas/editar/{CuentaId:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>CuentaEditar</h3>

@if (cuenta is null)
{
    <p>Cargando...</p>
}
else
{
    <CuentaForm @ref="cuentaForm" Cuenta="cuenta" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private CuentaBancaria? cuenta;
    private CuentaForm? cuentaForm;

    [Parameter]
    public int CuentaId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<CuentaBancaria>($"api/cuentas/{CuentaId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("bancos");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        cuenta = responseHTTP.Response;
    }

    private async Task EditAsync()
    {
        var responseHTTP = await repository.Put("api/cuentas", cuenta);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        cuentaForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/bancos/detalles/{cuenta!.BancoId}");
    }
}