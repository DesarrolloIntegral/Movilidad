@page "/tarifasdetalle/editar/{DetalleId:int}/{Page:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService

<h3>Editar Detalle Tarifa</h3>

@if (tarifadetalle is null)
{
    <p>Cargando...</p>
}
else
{
    <TarifaDetalleForm @ref="taridetallefaForm" Detalle="tarifadetalle" TarifaId="DetalleId" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private TarifaDetalle? tarifadetalle = new();
    private TarifaDetalleForm? taridetallefaForm;

    [Parameter]
    public int DetalleId { get; set; }

    [Parameter]
    public int Page { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<TarifaDetalle>($"api/tarifasDetalle/{DetalleId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo($"/tarifas/detalles/{tarifadetalle!.TarifaId}");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        tarifadetalle = responseHTTP.Response;
    }

    private async Task EditAsync()
    {
        var responseHTTP = await repository.Put("api/tarifasDetalle", tarifadetalle);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        taridetallefaForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/tarifas/detalles/{tarifadetalle!.TarifaId}/{Page}");
    }
}